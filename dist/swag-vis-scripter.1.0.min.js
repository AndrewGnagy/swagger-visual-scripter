let chartProperties = {};
function openBottom() {
  document.getElementById('bottomcard').style.height = '280px';
}
function closeBottom() {
  document.getElementById('bottomcard').style.height = '0px';
}
document.addEventListener('DOMContentLoaded', function () {
  let a;
  var r,
    t,
    o = !1,
    s = {
      active: 'api',
      api: [],
      logic: [
        p('IF', 'if block', void 0, [{ name: 'logic', value: 'if' }]),
        p('FOR', 'for block', void 0, [{ name: 'logic', value: 'for' }]),
        p('Set Variable', 'Set a value as a variable', 'assets/log.svg', [
          { name: 'logic', value: 'set' },
        ]),
      ],
      loggers: [
        p('Add log', 'Logs a given input', 'assets/log.svg', [
          { name: 'logic', value: 'log' },
        ]),
      ],
    };
  flowy(
    document.getElementById('canvas'),
    function (e) {
      e.classList.add('blockdisabled'), (t = e);
    },
    function () {
      t && t.classList.remove('blockdisabled');
    },
    function (e, t, r) {
      let o = e.querySelector('[name="logic"]'),
        a = parseInt(e.querySelector('.blockid').value);
      (chartProperties[a] = {}),
        o &&
          'if' == o.value &&
          setTimeout(function () {
            flowy.addBlock(
              new DOMParser().parseFromString(
                p('True', 'executes if true'),
                'text/html'
              ).body.childNodes[0],
              a
            ),
              flowy.addBlock(
                new DOMParser().parseFromString(
                  p('False', 'executes if false'),
                  'text/html'
                ).body.childNodes[0],
                a
              );
          }, 250);
      if (t) return !0;
      var t = parseInt(r.querySelector('.blockid').value),
        s = r.querySelector('[name="logic"]');
      s &&
        'for' == s.value &&
        (e.classList.add('forhighlight'), r.classList.add('forhighlight'));
      return 0 == getChildBlocks(t, flowy.output()).length;
    },
    function (e, t) {
      return !0;
    }
  );
  function e() {
    o &&
      ((o = !1),
      document.getElementById('properties').classList.remove('expanded'),
      setTimeout(function () {
        document.getElementById('propwrap').classList.remove('itson');
      }, 300),
      r.classList.remove('selectedblock'));
  }
  function n(e, t, r, o) {
    for (var a = document.querySelectorAll(o), s = 0; s < a.length; s++)
      a[s].addEventListener(e, t, r);
  }
  function i(e) {
    (c = !(l = !0)), e.target.closest('.create-flowy') && (c = !0);
  }
  n(
    'click',
    function () {
      var e;
      document.querySelector('.navactive').classList.add('navdisabled'),
        document.querySelector('.navactive').classList.remove('navactive'),
        this.classList.add('navactive'),
        this.classList.remove('navdisabled'),
        (e = this.getAttribute('id')),
        (s.active = e),
        (document.getElementById('blocklist').innerHTML = s[e].join('\n'));
    },
    !1,
    '.side'
  ),
    document
      .getElementById('propertiesClose')
      .addEventListener('click', function () {
        e();
      }),
    document
      .getElementById('removeblock')
      .addEventListener('click', function () {
        (chartPropertiesKeys = Object.keys(chartProperties)).includes(
          flowy.getActiveBlockId()
        ) &&
          (flowy.deleteBranch(flowy.getActiveBlockId()),
          chartPropertiesKeys.forEach((e) => {
            getBlock(e) || delete chartProperties[e];
          })),
          e();
      });
  var l = !1,
    c = !1;
  function d(e) {
    var t = Object.keys(e);
    if (
      t.includes('swaggerJson') ||
      t.includes('flowyOutput') ||
      t.includes('chartProperties')
    )
      t.includes('swaggerJson') && (a = e.swaggerJson),
        t.includes('flowyOutput') && flowy.import(e.flowyOutput),
        t.includes('chartProperties') && (chartProperties = e.chartProperties),
        u();
    else {
      if (!e.info) throw new Error('Not a real swagger json file?');
      if (
        (e.servers &&
          0 < e.servers.length &&
          ((baseUrl = e.servers[0].url),
          (document.querySelector('#baseUrl').value = baseUrl)),
        (document.getElementById('swaggerName').innerHTML =
          e?.info?.title || ''),
        (document.getElementById('swaggerVersion').innerHTML = e?.info?.version
          ? 'v' + e?.info?.version
          : ''),
        t.includes('swagger') ||
          (t.includes('openapi') && parseInt(e.openapi.charAt(0)) < 3))
      )
        convertV2ToV3(e).then((e) => {
          (a = e), u();
        });
      else {
        if (!t.includes('openapi'))
          throw new Error('Not a real swagger json file?');
        (a = e), u();
      }
    }
  }
  let u = function () {
    apiPaths = Object.keys(a.paths);
    for (let e = 0; e < apiPaths.length; e++) {
      var t = apiPaths[e];
      pathMethods = Object.keys(a.paths[t]);
      for (let e = 0; e < pathMethods.length; e++) {
        var r = pathMethods[e];
        'servers' != r &&
          ((r = p(
            r + ' ' + t,
            a.paths[t][r].summary || a.paths[t][r].description,
            'assets/arrow.svg',
            [
              { name: 'method', value: r },
              { name: 'path', value: t },
            ]
          )),
          s[(o = 'api')].push(r),
          s.active == o) &&
          (document.getElementById('blocklist').innerHTML = s[o].join('\n'));
      }
    }
    var o;
  };
  function p(e, t = '-', r = 'assets/action.svg', o = []) {
    return `<div class="blockelem create-flowy noselect blockroot">${o
      .map(
        (e) =>
          `<input type="hidden" name="${e.name}" class="${e.name}" value="${e.value}"></input>`
      )
      .join(
        '\n'
      )}<div class="grabme"><img src="https://storage.googleapis.com/lastelm-static/assets/grabme.svg"></div><div class="blockin"><div class="blockico"><span></span><img src="https://storage.googleapis.com/lastelm-static/${r}"></div><div class="blocktext"><p class="blocktitle ${
      e.split(' ')[0]
    }">${e}</p><p class="blockdesc">${t}</p></div></div></div>`;
  }
  addEventListener('mousedown', i, !1),
    addEventListener(
      'mousemove',
      function (e) {
        l = !1;
      },
      !1
    ),
    addEventListener(
      'mouseup',
      function (e) {
        if ('mouseup' === e.type && l && !c) {
          document
            .querySelectorAll('.selectedblock')
            .forEach((e) => e.classList.remove('selectedblock'));
          var t = e.target.closest('.block');
          let n = flowy.getActiveBlockId();
          if (t && !t.classList.contains('dragging')) {
            if (chartProperties[n]) {
              if (0 == Object.keys(chartProperties[n]).length) {
                let r = getDataProperty(
                    (flowyBlock = getBlock(n)).data,
                    'method'
                  ),
                  o = getDataProperty(flowyBlock.data, 'path');
                t = getDataProperty(flowyBlock.data, 'logic');
                r
                  ? Object.keys(a.paths).forEach((t) => {
                      t == o &&
                        (pathMethods = Object.keys(a.paths[t])).forEach((e) => {
                          e == r &&
                            ((chartProperties[n] = {
                              path: r + ' ' + o,
                              properties: a.paths[t][e].parameters || [],
                            }),
                            a.paths[t][e].requestBody) &&
                            ((e =
                              a.paths[t][e].requestBody.content?.[
                                'application/json'
                              ]?.examples),
                            chartProperties[n].properties.push({
                              name: 'Body',
                              description: 'Request body',
                              required: 'true',
                              in: 'body',
                              schema: { type: 'json' },
                              examples:
                                e && 0 < Object.keys(e).length
                                  ? e[Object.keys(e)[0]]?.value
                                  : '{}',
                            }));
                        });
                    })
                  : (chartProperties[n] = t
                      ? {
                          logic: t,
                          properties: [
                            {
                              name: 'expression',
                              description: 'what to evaluate',
                              required: 'true',
                              schema: { type: 'string' },
                            },
                          ],
                        }
                      : { properties: [] });
              }
              (document.getElementById('parameterinputs').innerHTML = ''),
                chartProperties[n].properties.forEach((s) => {
                  if (
                    (document
                      .getElementById('parameterinputs')
                      .insertAdjacentHTML(
                        'beforeend',
                        `<h3 class="propheader">Name: ${s.name}</h3>`
                      ),
                    Object.keys(s).forEach((e) => {
                      'schema' == e
                        ? document
                            .getElementById('parameterinputs')
                            .insertAdjacentHTML(
                              'beforeend',
                              `<p class="propdata">${e.toUpperCase()}: ${JSON.stringify(
                                s[e]
                              )}</p>`
                            )
                        : 'name' != e &&
                          'value' != e &&
                          document
                            .getElementById('parameterinputs')
                            .insertAdjacentHTML(
                              'beforeend',
                              `<p class="propdata">${e.toUpperCase()}: ${
                                s[e]
                              }</p>`
                            );
                    }),
                    null != s.schema)
                  ) {
                    var t = s.schema.type;
                    let e;
                    s.schema.enum
                      ? ((r = s.schema.enum.map(
                          (e) => `<option value="${e}">${e}</option>`
                        )),
                        (e = `<select class="dropme" data-id="${n} ${
                          s.name
                        }">${r.join('\n')}</select>`))
                      : 'string' == t || 'integer' == t
                      ? (e = `<input class="propinput" type="text" data-id="${n} ${s.name}">`)
                      : 'boolean' == t
                      ? (e = `<input type="checkbox" data-id="${n} ${s.name}">`)
                      : 'json' == t &&
                        (e = `<textarea data-id="${n} ${s.name}">`);
                    var r = new DOMParser().parseFromString(e, 'text/html').body
                      .childNodes[0];
                    s.value &&
                      (s.schema.enum ||
                      'string' == t ||
                      'integer' == t ||
                      'json' == t
                        ? (r.value = s.value)
                        : 'boolean' == t && (r.checked = s.value)),
                      document
                        .getElementById('parameterinputs')
                        .insertAdjacentElement('beforeend', r),
                      document
                        .querySelector(`[data-id='${n} ${s.name}']`)
                        .addEventListener('change', (e) => {
                          {
                            var r = n,
                              o = s.name;
                            let t;
                            t =
                              'checkbox' == e.target.type
                                ? e.currentTarget.checked
                                : e.target.value;
                            var a = chartProperties[r].properties;
                            for (let e = 0; e < a.length; e++)
                              if (a[e].name == o) {
                                a[e].value = t;
                                break;
                              }
                          }
                        });
                  }
                });
            }
            (r = e.target.closest('.block')),
              (o = !0),
              document.getElementById('properties').classList.add('expanded'),
              document.getElementById('propwrap').classList.add('itson'),
              r.classList.add('selectedblock');
          }
        }
      },
      !1
    ),
    n('touchstart', i, !1, '.block'),
    document.querySelector('#search input').addEventListener(
      'input',
      function (e) {
        let t = e.target.value;
        (e = s[s.active]),
          (document.getElementById('blocklist').innerHTML = e.filter((e) => {
            return (
              -1 !=
              new DOMParser()
                .parseFromString(e, 'text/html')
                .querySelector('.blocktitle')
                .innerHTML.toLowerCase()
                .indexOf(t.toLowerCase())
            );
          }));
      },
      !1
    );
  document.querySelector('#importinput').addEventListener(
    'change',
    function (e) {
      var t = new FileReader();
      (t.onload = function (e) {
        try {
          var t = JSON.parse(e.target.result);
          d(t);
        } catch (e) {
          console.log('Error reading swagger json'), console.error(e);
        }
      }),
        t.readAsText(e.target.files[0]);
    },
    !1
  );
  document.querySelector('#runscript').addEventListener(
    'click',
    function () {
      executeScript();
    },
    !1
  );
  const g = document.querySelector('#settingsModal');
  document.querySelector('#settingsBtn').addEventListener(
    'click',
    function () {
      g.style.display = 'block';
    },
    !1
  ),
    document.querySelector('#settingsClose').addEventListener(
      'click',
      function () {
        g.style.display = 'none';
      },
      !1
    );
  const m = document.querySelector('#baseUrl');
  m.addEventListener(
    'input',
    function (e) {
      baseUrl = e.target.value;
    },
    !1
  );
  var h;
  (h = m.value), (baseUrl = null != h && '' !== h ? h : '');
  document
    .querySelector('#consoleClose')
    .addEventListener('click', closeBottom, !1),
    document.querySelector('#export').addEventListener(
      'click',
      function () {
        const e = document.createElement('a');
        var t = flowy.output(),
          t = JSON.stringify({
            swaggerJson: a,
            flowyOutput: t,
            chartProperties: chartProperties,
          });
        (e.href = URL.createObjectURL(
          new Blob([t], { type: 'application/json' })
        )),
          (e.download = 'swaggerFlowChart.json'),
          e.click(),
          setTimeout(() => URL.revokeObjectURL(e.href), 6e4);
      },
      !1
    ),
    fetch('./swagger.json')
      .then((e) => e.json())
      .then(d);
});
let flowVariables = {},
  baseUrl;
function executeScript() {
  if (void 0 === baseUrl && null === baseUrl && '' !== baseUrl)
    throw new Error('Invalid Base URL');
  executeBlock(0), openBottom();
}
function executeBlock(t, e) {
  var r = getBlock(t),
    o = getChildBlocks(t);
  e && 0 < e.length && (flowVariables.loopItem = e[0]);
  try {
    if (getDataProperty(r.data, 'method'))
      return executeApiBlock(r, e?.slice(1));
    if (getDataProperty(r.data, 'logic')) {
      var a = getDataProperty(r.data, 'logic');
      switch ((console.log(a), a)) {
        case 'if':
          var s = processExpression(chartProperties[t].properties[0].value),
            n = (swagLog('If result: ' + !!s), s ? 0 : 1),
            i = getChildBlocks(o[n].id);
          return void (0 < i.length && executeBlock(i[0].id));
        case 'for':
          var l = processExpression(chartProperties[t].properties[0].value);
          if (Array.isArray(l)) return void executeBlock(o[0].id, l);
          throw new Error('For loop result was not iterable');
        case 'log':
          swagLog(chartProperties[t].properties[0].value);
      }
    }
  } catch (e) {
    return errorHighlight(t), void swagLog(e.toString());
  }
  return null != e && 0 < e.length
    ? executeBlock(r.id, e.slice(1))
    : 0 < o.length
    ? executeBlock(o[0].id, e)
    : void 0;
}
function errorHighlight(e) {
  let t = document.querySelector(".blockid[value='" + e + "']").parentElement;
  t.classList.add('errorblock'),
    setTimeout(function () {
      t.classList.remove('errorblock');
    }, 5e3),
    swagLog('Error running block: ' + e);
}
function processExpression(expression) {
  return (
    (expression = expression
      .split(' ')
      .map((e) => {
        var t;
        return e.startsWith('$')
          ? ((t = resolveVariable(e)), JSON.stringify(t))
          : e;
      })
      .join(' ')),
    eval(expression)
  );
}
function getBlock(t) {
  var e = flowy.output();
  if (('string' == typeof t && (t = parseInt(t)), e))
    return e.blocks.filter((e) => e.id == t)[0];
}
function getChildBlocks(t) {
  return flowy.output().blocks.filter((e) => e.parent == t);
}
function getDataProperty(e, t) {
  return (prop = e.filter((e) => e.name == t)).length ? prop[0].value : void 0;
}
function executeApiBlock(t, r) {
  console.log('Api');
  var e = getDataProperty(t.data, 'method');
  let o = getDataProperty(t.data, 'path'),
    a;
  void 0 !== chartProperties[t.id] &&
    void 0 !== chartProperties[t.id].properties &&
    chartProperties[t.id].properties.forEach((e) => {
      let t = e.value;
      var r;
      null != t &&
        ('string' == typeof t && t.startsWith('$') && (t = resolveVariable(t)),
        e.in && 'query' == e.in
          ? ((r = -1 == o.indexOf('?') ? '?' : '&'),
            (o += r + e.name + '=' + t))
          : e.in && 'path' == e.in
          ? (o = o.replace(`{${e.name}}`, t))
          : e.in &&
            'body' == e.in &&
            (a = (a = e.value)
              .split(' ')
              .map((e) => {
                var t;
                return e.startsWith('$')
                  ? ((t = resolveVariable(e)), JSON.stringify(t))
                  : e;
              })
              .join(' ')));
    }),
    swagLog('Making ' + e + ' request to: ' + o);
  var s = new XMLHttpRequest(),
    e =
      (s.open(e, baseUrl + o),
      s.setRequestHeader('Content-Type', 'application/json'),
      document.getElementById('apiKey').value ||
        '130eff77-4b97-41d2-9198-d8e52e5dc96c'),
    e =
      (s.setRequestHeader('api-key', e),
      document.getElementById('authBearer').value);
  e && s.setRequestHeader('Authorization', e),
    makeRequest(s, a)
      .then((e) => {
        if (null != r && 0 < r.length) return executeBlock(t.id, r);
        flowVariables.lastResult = e;
        e = getChildBlocks(t.id);
        0 < e.length && executeBlock(e[0].id, r);
      })
      .catch((e) => {
        errorHighlight(t.id);
      });
}
function resolveVariable(t) {
  t = t.replace('$', '');
  let e = void 0;
  try {
    e = t.split('.').reduce((e, t) => e && e[t], flowVariables);
  } catch (e) {
    throw (
      (swagLog(`Var ${t} couldn't be found`),
      new Error(`Variable ${t} could not be resolved`))
    );
  }
  return e;
}
let convertV2ToV3 = async (e) => {
    var t = 'https://converter.swagger.io/api/convert',
      e = ((method = 'POST'), JSON.stringify(e)),
      r =
        (console.log('Making ' + method + ' request to: ' + t),
        new XMLHttpRequest());
    return (
      r.open(method, t),
      r.setRequestHeader('Content-Type', 'application/json'),
      makeRequest(r, e, !1)
    );
  },
  makeRequest = async (r, o, a = !0) =>
    new Promise((e, t) => {
      (r.onreadystatechange = () => {
        if (4 == r.readyState && 200 == r.status) {
          a && swagLog('responseText:' + r.responseText);
          try {
            (flowVariables.lastStatus = r.status),
              r.responseText ? e(JSON.parse(r.responseText)) : e();
          } catch (e) {
            t(Error(e.message + ' in ' + r.responseText, e));
          }
        } else
          4 == r.readyState && t('Request returned status code ' + r.status);
      }),
        (r.onerror = () => {
          a && swagLog('Error occured while making the request'),
            t(Error('There was a network error.'));
        }),
        r.send(o);
    }),
  swagLog = function (e) {
    console.log(e);
    e = `<p>>> ${(e = e.startsWith('$') ? resolveVariable(e) : e)}</p>`;
    document.querySelector('#consoleBody').insertAdjacentHTML('beforeend', e);
  };
